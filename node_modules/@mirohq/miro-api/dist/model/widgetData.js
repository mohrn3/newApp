"use strict";
/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WidgetData = void 0;
/**
 * @internal
 * Contains the item data, such as the item title, content, or description.
 */
class WidgetData {
    constructor() {
        /**
         * The actual text (content) that appears in the sticky note item.
         */
        this['content'] = 'Hello';
        /**
         * Defines the geometric shape of the sticky note and aspect ratio for its dimensions. Possible values: `square`, `rectangle`
         */
        this['shape'] = WidgetData.ShapeEnum.Square;
        /**
         * Only custom frames are supported at the moment. Possible values: `custom`, `desktop`, `phone`, `tablet`, `a4`, `letter`, `ratio_1x1`, `ratio_4x3`, `ratio_16x9`
         */
        this['format'] = WidgetData.FormatEnum.Custom;
        /**
         * Only free form frames are supported at the moment. Possible values: `freeform`, `heap`, `grid`, `rows`, `columns`
         */
        this['type'] = WidgetData.TypeEnum.Freeform;
    }
    /** @ignore */
    static getAttributeTypeMap() {
        return WidgetData.attributeTypeMap;
    }
}
exports.WidgetData = WidgetData;
/** @ignore */
WidgetData.discriminator = undefined;
/** @ignore */
WidgetData.attributeTypeMap = [
    {
        name: 'content',
        baseName: 'content',
        type: 'string',
    },
    {
        name: 'contentType',
        baseName: 'contentType',
        type: 'string',
    },
    {
        name: 'description',
        baseName: 'description',
        type: 'string',
    },
    {
        name: 'html',
        baseName: 'html',
        type: 'string',
    },
    {
        name: 'mode',
        baseName: 'mode',
        type: 'WidgetData.ModeEnum',
    },
    {
        name: 'previewUrl',
        baseName: 'previewUrl',
        type: 'string',
    },
    {
        name: 'providerName',
        baseName: 'providerName',
        type: 'string',
    },
    {
        name: 'providerUrl',
        baseName: 'providerUrl',
        type: 'string',
    },
    {
        name: 'title',
        baseName: 'title',
        type: 'string',
    },
    {
        name: 'url',
        baseName: 'url',
        type: 'string',
    },
    {
        name: 'assigneeId',
        baseName: 'assigneeId',
        type: 'number',
    },
    {
        name: 'dueDate',
        baseName: 'dueDate',
        type: 'Date',
    },
    {
        name: 'fields',
        baseName: 'fields',
        type: 'Array<CustomField>',
    },
    {
        name: 'owned',
        baseName: 'owned',
        type: 'boolean',
    },
    {
        name: 'status',
        baseName: 'status',
        type: 'WidgetData.StatusEnum',
    },
    {
        name: 'imageUrl',
        baseName: 'imageUrl',
        type: 'string',
    },
    {
        name: 'documentUrl',
        baseName: 'documentUrl',
        type: 'string',
    },
    {
        name: 'shape',
        baseName: 'shape',
        type: 'WidgetData.ShapeEnum',
    },
    {
        name: 'format',
        baseName: 'format',
        type: 'WidgetData.FormatEnum',
    },
    {
        name: 'type',
        baseName: 'type',
        type: 'WidgetData.TypeEnum',
    },
];
(function (WidgetData) {
    WidgetData.ModeEnum = {
        Inline: 'inline',
        Modal: 'modal',
    };
    WidgetData.StatusEnum = {
        Disconnected: 'disconnected',
        Connected: 'connected',
        Disabled: 'disabled',
    };
    WidgetData.ShapeEnum = {
        Square: 'square',
        Rectangle: 'rectangle',
    };
    WidgetData.FormatEnum = {
        Custom: 'custom',
        Desktop: 'desktop',
        Phone: 'phone',
        Tablet: 'tablet',
        A4: 'a4',
        Letter: 'letter',
        Ratio1x1: 'ratio_1x1',
        Ratio4x3: 'ratio_4x3',
        Ratio16x9: 'ratio_16x9',
    };
    WidgetData.TypeEnum = {
        Freeform: 'freeform',
        Heap: 'heap',
        Grid: 'grid',
        Rows: 'rows',
        Columns: 'columns',
    };
})(WidgetData = exports.WidgetData || (exports.WidgetData = {}));
