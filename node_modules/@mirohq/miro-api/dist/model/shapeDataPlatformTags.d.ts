/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * @internal
 * Contains shape item data, such as the content or shape type of the shape. For information about the JSON properties, see [Data](https://developers.miro.com/reference/data).
 */
export declare class ShapeDataPlatformTags {
    /**
     * The text you want to display on the shape.
     */
    'content'?: string;
    /**
     * Defines the geometric shape of the item when it is rendered on the board. Possible values: `rectangle`, `round_rectangle`, `circle`, `triangle`, `rhombus`, `parallelogram`, `trapezoid`, `pentagon`, `hexagon`, `octagon`, `wedge_round_rectangle_callout`, `star`, `flow_chart_predefined_process`, `cloud`, `cross`, `can`, `right_arrow`, `left_arrow`, `left_right_arrow`, `left_brace`, `right_brace`
     */
    'shape'?: string | typeof ShapeDataPlatformTags.ShapeEnum[keyof typeof ShapeDataPlatformTags.ShapeEnum];
    /** @ignore */
    static discriminator: string | undefined;
    /** @ignore */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /** @ignore */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace ShapeDataPlatformTags {
    const ShapeEnum: {
        readonly Rectangle: "rectangle";
        readonly RoundRectangle: "round_rectangle";
        readonly Circle: "circle";
        readonly Triangle: "triangle";
        readonly Rhombus: "rhombus";
        readonly Parallelogram: "parallelogram";
        readonly Trapezoid: "trapezoid";
        readonly Pentagon: "pentagon";
        readonly Hexagon: "hexagon";
        readonly Octagon: "octagon";
        readonly WedgeRoundRectangleCallout: "wedge_round_rectangle_callout";
        readonly Star: "star";
        readonly FlowChartPredefinedProcess: "flow_chart_predefined_process";
        readonly Cloud: "cloud";
        readonly Cross: "cross";
        readonly Can: "can";
        readonly RightArrow: "right_arrow";
        readonly LeftArrow: "left_arrow";
        readonly LeftRightArrow: "left_right_arrow";
        readonly LeftBrace: "left_brace";
        readonly RightBrace: "right_brace";
    };
}
