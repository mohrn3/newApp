import { Response } from 'node-fetch';
import FormData from 'form-data';
import { AppCardCreateRequest } from '../model/appCardCreateRequest';
import { AppCardItem } from '../model/appCardItem';
import { AppCardUpdateRequest } from '../model/appCardUpdateRequest';
import { BoardDataClassificationLabel } from '../model/boardDataClassificationLabel';
import { DataClassificationLabelId } from '../model/dataClassificationLabelId';
import { DataClassificationOrganizationSettings } from '../model/dataClassificationOrganizationSettings';
import { DataClassificationTeamSettings } from '../model/dataClassificationTeamSettings';
import { UpdateBoardsDataClassificationLabel } from '../model/updateBoardsDataClassificationLabel';
import { UpdateBoardsDataClassificationLabelRequest } from '../model/updateBoardsDataClassificationLabelRequest';
import { UpdateTeamSettingsRequest } from '../model/updateTeamSettingsRequest';
import { BoardMemberChanges } from '../model/boardMemberChanges';
import { BoardMemberWithLinks } from '../model/boardMemberWithLinks';
import { BoardMembersInvite } from '../model/boardMembersInvite';
import { BoardMembersPagedResponse } from '../model/boardMembersPagedResponse';
import { InvitationResult } from '../model/invitationResult';
import { BoardChanges } from '../model/boardChanges';
import { BoardWithLinks } from '../model/boardWithLinks';
import { BoardsPagedResponse } from '../model/boardsPagedResponse';
import { CardCreateRequest } from '../model/cardCreateRequest';
import { CardItem } from '../model/cardItem';
import { CardUpdateRequest } from '../model/cardUpdateRequest';
import { ConnectorChangesData } from '../model/connectorChangesData';
import { ConnectorCreationData } from '../model/connectorCreationData';
import { ConnectorWithLinks } from '../model/connectorWithLinks';
import { ConnectorsCursorPaged } from '../model/connectorsCursorPaged';
import { DocumentCreateRequest } from '../model/documentCreateRequest';
import { DocumentItem } from '../model/documentItem';
import { DocumentUpdateRequest } from '../model/documentUpdateRequest';
import { EmbedCreateRequest } from '../model/embedCreateRequest';
import { EmbedItem } from '../model/embedItem';
import { EmbedUpdateRequest } from '../model/embedUpdateRequest';
import { FrameCreateRequest } from '../model/frameCreateRequest';
import { FrameItem } from '../model/frameItem';
import { FrameUpdateRequest } from '../model/frameUpdateRequest';
import { ImageCreateRequest } from '../model/imageCreateRequest';
import { ImageItem } from '../model/imageItem';
import { ImageUpdateRequest } from '../model/imageUpdateRequest';
import { GenericItem } from '../model/genericItem';
import { GenericItemCursorPaged } from '../model/genericItemCursorPaged';
import { GenericItemUpdate } from '../model/genericItemUpdate';
import { EnterpriseGetOrganizationMembers200Response } from '../model/enterpriseGetOrganizationMembers200Response';
import { Organization } from '../model/organization';
import { OrganizationMember } from '../model/organizationMember';
import { ShapeCreateRequest } from '../model/shapeCreateRequest';
import { ShapeItem } from '../model/shapeItem';
import { ShapeUpdateRequest } from '../model/shapeUpdateRequest';
import { StickyNoteCreateRequest } from '../model/stickyNoteCreateRequest';
import { StickyNoteItem } from '../model/stickyNoteItem';
import { StickyNoteUpdateRequest } from '../model/stickyNoteUpdateRequest';
import { GetTagsResponse } from '../model/getTagsResponse';
import { ItemPagedResponse } from '../model/itemPagedResponse';
import { TagCreateRequest } from '../model/tagCreateRequest';
import { TagUpdateRequest } from '../model/tagUpdateRequest';
import { TagWithLinks } from '../model/tagWithLinks';
import { TagsPagedResponse } from '../model/tagsPagedResponse';
import { TeamMember } from '../model/teamMember';
import { TeamMemberChanges } from '../model/teamMemberChanges';
import { TeamMemberInvite } from '../model/teamMemberInvite';
import { TeamSettings } from '../model/teamSettings';
import { TeamSettingsChanges } from '../model/teamSettingsChanges';
import { CreateTeamRequest } from '../model/createTeamRequest';
import { Team } from '../model/team';
import { TeamChanges } from '../model/teamChanges';
import { TextCreateRequest } from '../model/textCreateRequest';
import { TextItem } from '../model/textItem';
import { TextUpdateRequest } from '../model/textUpdateRequest';
export declare type Logger = (...thing: any) => void;
export declare class MiroApi {
    accessToken: string | (() => Promise<string>);
    basePath: string;
    logger?: Logger;
    httpTimeout?: number;
    constructor(accessToken: string | (() => Promise<string>), basePath?: string, logger?: Logger, httpTimeout?: number);
    /**
     * Adds an app card item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Create app card item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.
     * @param appCardCreateRequest
     */
    createAppCardItem(boardId: string, appCardCreateRequest: AppCardCreateRequest): Promise<{
        response: Response;
        body: AppCardItem;
    }>;
    /**
     * Deletes an app card item from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete app card item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete an item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
     */
    deleteAppCardItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves information for a specific app card item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get app card item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
     */
    getAppCardItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: AppCardItem;
    }>;
    /**
     * Updates an app card item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update app card item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
     * @param appCardUpdateRequest
     */
    updateAppCardItem(boardId: string, itemId: string, appCardUpdateRequest: AppCardUpdateRequest): Promise<{
        response: Response;
        body: AppCardItem;
    }>;
    /**
     * Retrieves board classification for a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get board classification
     * @param orgId id of the organization
     * @param teamId id of the team
     * @param boardId Unique identifier of the board that you want to retrieve.
     */
    enterpriseDataclassificationBoardGet(orgId: string, teamId: string, boardId: string): Promise<{
        response: Response;
        body: BoardDataClassificationLabel;
    }>;
    /**
     * Updates board classification for an existing board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Update board classification
     * @param orgId id of the organization
     * @param teamId id of the team
     * @param boardId Unique identifier of the board that you want to update.
     * @param dataClassificationLabelId
     */
    enterpriseDataclassificationBoardSet(orgId: string, teamId: string, boardId: string, dataClassificationLabelId: DataClassificationLabelId): Promise<{
        response: Response;
        body: BoardDataClassificationLabel;
    }>;
    /**
     * Retrieves board classification settings for an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get organization settings
     * @param orgId id of the organization
     */
    enterpriseDataclassificationOrganizationSettingsGet(orgId: string): Promise<{
        response: Response;
        body: DataClassificationOrganizationSettings;
    }>;
    /**
     * Updates board classification for not-classified only or all boards in an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Bulk update boards classification
     * @param orgId id of the organization
     * @param teamId id of the team
     * @param updateBoardsDataClassificationLabelRequest
     */
    enterpriseDataclassificationTeamBoardsBulk(orgId: string, teamId: string, updateBoardsDataClassificationLabelRequest: UpdateBoardsDataClassificationLabelRequest): Promise<{
        response: Response;
        body: UpdateBoardsDataClassificationLabel;
    }>;
    /**
     * Retrieves board classification settings for an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get team settings
     * @param orgId id of the organization
     * @param teamId id of the team
     */
    enterpriseDataclassificationTeamSettingsGet(orgId: string, teamId: string): Promise<{
        response: Response;
        body: DataClassificationTeamSettings;
    }>;
    /**
     * Updates board classification settings for an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Update team settings
     * @param orgId id of the organization
     * @param teamId id of the team
     * @param updateTeamSettingsRequest
     */
    enterpriseDataclassificationTeamSettingsSet(orgId: string, teamId: string, updateTeamSettingsRequest: UpdateTeamSettingsRequest): Promise<{
        response: Response;
        body: DataClassificationTeamSettings;
    }>;
    /**
     * Retrieves a pageable list of members for a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get all board members
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) to which the board member belongs.
     * @param limit
     * @param offset
     */
    getBoardMembers(boardId: string, query?: {
        limit?: string;
        offset?: string;
    }): Promise<{
        response: Response;
        body: BoardMembersPagedResponse;
    }>;
    /**
     * Retrieves information for a board member.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get specific board member
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) to which the board member belongs.
     * @param boardMemberId Unique identifier (ID) of the board member whose role you want to retrieve.
     */
    getSpecificBoardMember(boardId: string, boardMemberId: string): Promise<{
        response: Response;
        body: BoardMemberWithLinks;
    }>;
    /**
     * Removes a board member from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Remove board member
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete an item.
     * @param boardMemberId Unique identifier (ID) of the board member whose role you want to delete.
     */
    removeBoardMember(boardId: string, boardMemberId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board\'s [Sharing policy](https://developers.miro.com/reference/rest-api-policy-data-model#sharing-policy), there might be various scenarios where membership in the team is required in order to share the board with a user. For more information on sharing policy and different scenarios, see [Sharing policy](https://developers.miro.com/reference/rest-api-policy-data-model#sharing-policy).<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Share board
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) to which the board member belongs.
     * @param boardMembersInvite
     */
    shareBoard(boardId: string, boardMembersInvite: BoardMembersInvite): Promise<{
        response: Response;
        body: InvitationResult;
    }>;
    /**
     * Updates the role of a board member.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update board member
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to update the role of the board member.
     * @param boardMemberId Unique identifier (ID) of the board member whose role you want to update.
     * @param boardMemberChanges
     */
    updateBoardMember(boardId: string, boardMemberId: string, boardMemberChanges: BoardMemberChanges): Promise<{
        response: Response;
        body: BoardMemberWithLinks;
    }>;
    /**
     * Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 4</a><br/>
     * @summary Copy board
     * @param copyFrom [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to copy.
     * @param boardChanges
     */
    copyBoard(copyFrom: string, boardChanges?: BoardChanges): Promise<{
        response: Response;
        body: BoardWithLinks;
    }>;
    /**
     * Creates a board with the specified name and sharing policies.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Create board
     * @param boardChanges
     */
    createBoard(boardChanges?: BoardChanges): Promise<{
        response: Response;
        body: BoardWithLinks;
    }>;
    /**
     *
     * @summary Delete board
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to delete.
     */
    deleteBoard(boardId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves a list of boards that match the search criteria provided in the request. If you are an Enterprise customer and a Company Admin, you can retrieve all boards, including all private boards (boards that haven\'t been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see [Content Admin permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins). Note that you only get results instantaneously when you filter by `team_id`. If you use any other filter,  you need to give a few seconds for the indexing of newly created boards before retrieving boards.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get boards
     * @param teamId
     * @param query
     * @param owner
     * @param limit
     * @param offset
     * @param sort
     */
    getBoards(query?: {
        teamId?: string;
        query?: string;
        owner?: string;
        limit?: string;
        offset?: string;
        sort?: 'default' | 'last_modified' | 'last_opened' | 'last_created' | 'alphabetically';
    }): Promise<{
        response: Response;
        body: BoardsPagedResponse;
    }>;
    /**
     * Retrieves information about a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get specific board
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to retrieve.
     */
    getSpecificBoard(boardId: string): Promise<{
        response: Response;
        body: BoardWithLinks;
    }>;
    /**
     *
     * @summary Update board
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to update.
     * @param boardChanges
     */
    updateBoard(boardId: string, boardChanges: BoardChanges): Promise<{
        response: Response;
        body: BoardWithLinks;
    }>;
    /**
     * Adds a card item to a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Create card item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.
     * @param cardCreateRequest
     */
    createCardItem(boardId: string, cardCreateRequest: CardCreateRequest): Promise<{
        response: Response;
        body: CardItem;
    }>;
    /**
     * Deletes a card item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete card item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
     */
    deleteCardItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves information for a specific card item on a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get card item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
     */
    getCardItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: CardItem;
    }>;
    /**
     * Updates a card item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update card item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
     * @param cardUpdateRequest
     */
    updateCardItem(boardId: string, itemId: string, cardUpdateRequest: CardUpdateRequest): Promise<{
        response: Response;
        body: CardItem;
    }>;
    /**
     * Adds a connector to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Create connector
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to create the connector.
     * @param connectorCreationData
     */
    createConnector(boardId: string, connectorCreationData: ConnectorCreationData): Promise<{
        response: Response;
        body: ConnectorWithLinks;
    }>;
    /**
     * Deletes the specified connector from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete connector
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the connector.
     * @param connectorId [Unique identifier (ID) of the connector](https://developers.miro.com/reference/rest-api-connector-model) that you want to delete.
     */
    deleteConnector(boardId: string, connectorId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves information for a specific connector on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get specific connector
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific connector.
     * @param connectorId [Unique identifier (ID) of the connector](https://developers.miro.com/reference/rest-api-connector-model) that you want to retrieve.
     */
    getConnector(boardId: string, connectorId: string): Promise<{
        response: Response;
        body: ConnectorWithLinks;
    }>;
    /**
     * Retrieves a list of connectors for a specific board.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let\'s say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Get connectors
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a list of connectors.
     * @param limit
     * @param cursor
     */
    getConnectors(boardId: string, query?: {
        limit?: string;
        cursor?: string;
    }): Promise<{
        response: Response;
        body: ConnectorsCursorPaged;
    }>;
    /**
     * Updates a connector on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update connector
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to update the connector.
     * @param connectorId [Unique identifier (ID) of the connector](https://developers.miro.com/reference/rest-api-connector-model) that you want to update.
     * @param connectorChangesData
     */
    updateConnector(boardId: string, connectorId: string, connectorChangesData: ConnectorChangesData): Promise<{
        response: Response;
        body: ConnectorWithLinks;
    }>;
    /**
     * Revoke the current access token. Revoking an access token means that the access token will no longer work. When an access token is revoked, the refresh token is also revoked and no longer valid. This does not uninstall the application for the user.
     * @summary Revoke token
     * @param accessToken Access token that you want to revoke
     */
    revokeToken(accessToken: string): Promise<{
        response: Response;
        body?: any;
    }>;
    /**
     * Adds a document item to a board by specifying the URL where the document is hosted.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Create document item using URL
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.
     * @param documentCreateRequest
     */
    createDocumentItemUsingUrl(boardId: string, documentCreateRequest: DocumentCreateRequest): Promise<{
        response: Response;
        body: DocumentItem;
    }>;
    /**
     * Deletes a document item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete document item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
     */
    deleteDocumentItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves information for a specific document item on a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get document item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
     */
    getDocumentItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: DocumentItem;
    }>;
    /**
     * Updates a document item on a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update document item using URL
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
     * @param documentUpdateRequest
     */
    updateDocumentItemUsingUrl(boardId: string, itemId: string, documentUpdateRequest: DocumentUpdateRequest): Promise<{
        response: Response;
        body: DocumentItem;
    }>;
    /**
     * Adds an embed item containing external content to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Create embed item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.
     * @param embedCreateRequest
     */
    createEmbedItem(boardId: string, embedCreateRequest: EmbedCreateRequest): Promise<{
        response: Response;
        body: EmbedItem;
    }>;
    /**
     * Deletes an embed item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete embed item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
     */
    deleteEmbedItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves information for a specific embed item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get embed item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
     */
    getEmbedItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: EmbedItem;
    }>;
    /**
     * Updates an embed item on a board based on the data properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update embed item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
     * @param embedUpdateRequest
     */
    updateEmbedItem(boardId: string, itemId: string, embedUpdateRequest: EmbedUpdateRequest): Promise<{
        response: Response;
        body: EmbedItem;
    }>;
    /**
     * Adds a frame to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Create frame
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create a frame.
     * @param frameCreateRequest
     */
    createFrameItem(boardId: string, frameCreateRequest: FrameCreateRequest): Promise<{
        response: Response;
        body: FrameItem;
    }>;
    /**
     * Deletes a frame from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete frame
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the frame.
     * @param itemId [Unique identifier (ID) of the frame](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
     */
    deleteFrameItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves information for a specific frame on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get frame
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that contains the frame that you want to retrieve
     * @param itemId [Unique identifier (ID) of the frame](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
     */
    getFrameItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: FrameItem;
    }>;
    /**
     * Updates a frame on a board based on the data, style, or geometry properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update frame
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the frame.
     * @param itemId [Unique identifier (ID) of the frame](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
     * @param frameUpdateRequest
     */
    updateFrameItem(boardId: string, itemId: string, frameUpdateRequest: FrameUpdateRequest): Promise<{
        response: Response;
        body: FrameItem;
    }>;
    /**
     * Adds an image item to a board by specifying an image URL.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Create image item using URL
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.
     * @param imageCreateRequest
     */
    createImageItemUsingUrl(boardId: string, imageCreateRequest: ImageCreateRequest): Promise<{
        response: Response;
        body: ImageItem;
    }>;
    /**
     * Deletes an image item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete image item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
     */
    deleteImageItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves information for a specific image item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get image item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
     */
    getImageItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: ImageItem;
    }>;
    /**
     * Updates an image item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update image item using URL
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
     * @param imageUpdateRequest
     */
    updateImageItemUsingUrl(boardId: string, itemId: string, imageUpdateRequest: ImageUpdateRequest): Promise<{
        response: Response;
        body: ImageItem;
    }>;
    /**
     * Deletes an item from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
     */
    deleteItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves a list of items for a specific board. You can retrieve all items on the board, a list of child items inside a parent item, or a list of specific types of items by specifying URL query parameter values.  This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let\'s say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Get items on board
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) for which you want to retrieve the list of available items.
     * @param limit
     * @param type
     * @param cursor
     */
    getItems(boardId: string, query?: {
        limit?: string;
        type?: string;
        cursor?: string;
    }): Promise<{
        response: Response;
        body: GenericItemCursorPaged;
    }>;
    /**
     * Retrieves a list of items within a specific frame. A frame is a parent item and all items within a frame are child items. This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let\'s say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Get items within frame
     * @param boardIdPlatformContainers [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that contains the frame for which you want to retrieve the list of available items.
     * @param parentItemId ID of the frame for which you want to retrieve the list of available items.
     * @param limit
     * @param type
     * @param cursor
     */
    getItemsWithinFrame(boardIdPlatformContainers: string, parentItemId: string, query?: {
        limit?: string;
        type?: string;
        cursor?: string;
    }): Promise<{
        response: Response;
        body: GenericItemCursorPaged;
    }>;
    /**
     * Retrieves information for a specific item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get specific item on board
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
     */
    getSpecificItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: GenericItem;
    }>;
    /**
     * Updates the position or the parent of an item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update item position or parent
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
     * @param genericItemUpdate
     */
    updateItemPositionOrParent(boardId: string, itemId: string, genericItemUpdate: GenericItemUpdate): Promise<{
        response: Response;
        body: GenericItem;
    }>;
    /**
     * Retrieves organization information.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get organization info
     * @param orgId id of the organization
     */
    enterpriseGetOrganization(orgId: string): Promise<{
        response: Response;
        body: Organization;
    }>;
    /**
     * Retrieves organization member information for an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get organization member
     * @param orgId id of the organization
     * @param memberId id of the organization member
     */
    enterpriseGetOrganizationMember(orgId: string, memberId: string): Promise<{
        response: Response;
        body: OrganizationMember;
    }>;
    /**
     * Retrieves organization members based on the organization ID and the cursor, or based on the user emails provided in the request.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get organization members
     * @param orgId id of the organization
     * @param emails
     * @param role
     * @param license
     * @param active
     * @param cursor
     * @param limit
     */
    enterpriseGetOrganizationMembers(orgId: string, query?: {
        emails?: string;
        role?: 'organization_internal_admin' | 'organization_internal_user' | 'organization_external_user' | 'organization_team_guest_user' | 'unknown';
        license?: 'full' | 'occasional' | 'free' | 'free_restricted' | 'full_trial' | 'unknown';
        active?: boolean;
        cursor?: string;
        limit?: string;
    }): Promise<{
        response: Response;
        body: EnterpriseGetOrganizationMembers200Response;
    }>;
    /**
     * Adds a shape item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Create shape item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.
     * @param shapeCreateRequest
     */
    createShapeItem(boardId: string, shapeCreateRequest: ShapeCreateRequest): Promise<{
        response: Response;
        body: ShapeItem;
    }>;
    /**
     * Deletes a shape item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete shape item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
     */
    deleteShapeItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves information for a specific shape item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get shape item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
     */
    getShapeItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: ShapeItem;
    }>;
    /**
     * Updates a shape item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update shape item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
     * @param shapeUpdateRequest
     */
    updateShapeItem(boardId: string, itemId: string, shapeUpdateRequest: ShapeUpdateRequest): Promise<{
        response: Response;
        body: ShapeItem;
    }>;
    /**
     * Adds a sticky note item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Create sticky note item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.
     * @param stickyNoteCreateRequest
     */
    createStickyNoteItem(boardId: string, stickyNoteCreateRequest: StickyNoteCreateRequest): Promise<{
        response: Response;
        body: StickyNoteItem;
    }>;
    /**
     * Deletes a sticky note item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete sticky note item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
     */
    deleteStickyNoteItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves information for a specific sticky note item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get sticky note item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
     */
    getStickyNoteItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: StickyNoteItem;
    }>;
    /**
     * Updates a sticky note item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update sticky note item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
     * @param stickyNoteUpdateRequest
     */
    updateStickyNoteItem(boardId: string, itemId: string, stickyNoteUpdateRequest: StickyNoteUpdateRequest): Promise<{
        response: Response;
        body: StickyNoteItem;
    }>;
    /**
     * Attach an existing tag to the specified item. Card and sticky note items can have up to 8 tags.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Attach tag to item
     * @param boardIdPlatformTags [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) with the item that you want to add a tag to.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) to which you want to add a tag.
     * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) you want to add to the item.
     */
    attachTagToItem(boardIdPlatformTags: string, itemId: string, tagId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Creates a tag on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Create tag
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the tag.
     * @param tagCreateRequest
     */
    createTag(boardId: string, tagCreateRequest: TagCreateRequest): Promise<{
        response: Response;
        body: TagWithLinks;
    }>;
    /**
     * Deletes the specified tag from the board. The tag is also removed from all cards and sticky notes on the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Delete tag
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to delete a specific tag.
     * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to delete.
     */
    deleteTag(boardId: string, tagId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves all the items that have the specified tag.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get items by tag
     * @param boardIdPlatformTags [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to retrieve a specific tag.
     * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to retrieve.
     * @param limit
     * @param offset
     */
    getItemsByTag(boardIdPlatformTags: string, tagId: string, query?: {
        limit?: string;
        offset?: string;
    }): Promise<{
        response: Response;
        body: ItemPagedResponse;
    }>;
    /**
     * Retrieves information for a specific tag.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get tag
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to retrieve a specific tag.
     * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to retrieve.
     */
    getTag(boardId: string, tagId: string): Promise<{
        response: Response;
        body: TagWithLinks;
    }>;
    /**
     * Retrieves all the tags from the specified board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get tags from board
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) whose tags you want to retrieve.
     * @param limit
     * @param offset
     */
    getTagsFromBoard(boardId: string, query?: {
        limit?: string;
        offset?: string;
    }): Promise<{
        response: Response;
        body: TagsPagedResponse;
    }>;
    /**
     * Retrieves all the tags from the specified item.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get tags from item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) with the item whose tags you want to retrieve.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) whose tags you want to retrieve.
     */
    getTagsFromItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: GetTagsResponse;
    }>;
    /**
     * Removes the specified tag from the specified item. The tag still exists on the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Remove tag from item
     * @param boardIdPlatformTags [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) with the item that you want to remove a tag from.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to remove the tag from.
     * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to remove from the item.
     */
    removeTagFromItem(boardIdPlatformTags: string, itemId: string, tagId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Updates a tag based on the data properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Update tag
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update a specific tag.
     * @param tagId [Unique identifier (ID) of the tag](https://developers.miro.com/reference/rest-api-tag-data-model) that you want to update.
     * @param tagUpdateRequest
     */
    updateTag(boardId: string, tagId: string, tagUpdateRequest: TagUpdateRequest): Promise<{
        response: Response;
        body: TagWithLinks;
    }>;
    /**
     * Deletes team member from team by id.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Delete team member from team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param memberId The id of a Team member.
     */
    enterpriseDeleteTeamMember(orgId: string, teamId: string, memberId: string): Promise<{
        response: Response;
        body?: any;
    }>;
    /**
     * Retrieves team member by id.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get team member
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param memberId The id of a Team member.
     */
    enterpriseGetTeamMember(orgId: string, teamId: string, memberId: string): Promise<{
        response: Response;
        body: TeamMember;
    }>;
    /**
     * Retrieves team members by cursor.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary List team members
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param limit Limit for the number of team members returned in the result list.
     * @param cursor The ID of the team member used as the reference for pagination. To retrieve the first portion of the collection don\&#39;t pass a cursor value. To retrieve the next portion of the collection, set the &#x60;cursor&#x60; parameter value to the ID of the last team member you received in the response of the previous request.
     * @param filterQuery Filtering query
     */
    enterpriseGetTeamMembers(orgId: string, teamId: string, query?: {
        limit?: number;
        cursor?: string;
        filterQuery?: string;
    }): Promise<{
        response: Response;
        body: Array<TeamMember>;
    }>;
    /**
     * Invites a new member to an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Invite team members
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param teamMemberInvite
     */
    enterpriseInviteTeamMember(orgId: string, teamId: string, teamMemberInvite: TeamMemberInvite): Promise<{
        response: Response;
        body: TeamMember;
    }>;
    /**
     * Updates team member role in team by id.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Update team member
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param memberId The id of a Team member.
     * @param teamMemberChanges
     */
    enterpriseUpdateTeamMember(orgId: string, teamId: string, memberId: string, teamMemberChanges: TeamMemberChanges): Promise<{
        response: Response;
        body: TeamMember;
    }>;
    /**
     * Retrieves default team settings of an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get default team settings
     * @param orgId The id of an Organization.
     */
    enterpriseGetDefaultTeamSettings(orgId: string): Promise<{
        response: Response;
        body: TeamSettings;
    }>;
    /**
     * Retrieves team settings of an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get team settings
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     */
    enterpriseGetTeamSettings(orgId: string, teamId: string): Promise<{
        response: Response;
        body: TeamSettings;
    }>;
    /**
     * Updates team settings of an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Update team settings
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param teamSettingsChanges
     */
    enterpriseUpdateTeamSettings(orgId: string, teamId: string, teamSettingsChanges: TeamSettingsChanges): Promise<{
        response: Response;
        body: TeamSettings;
    }>;
    /**
     * Creates a new team in an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Create team
     * @param orgId The id of an Organization.
     * @param createTeamRequest
     */
    enterpriseCreateTeam(orgId: string, createTeamRequest: CreateTeamRequest): Promise<{
        response: Response;
        body: Team;
    }>;
    /**
     * Deletes an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Delete team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     */
    enterpriseDeleteTeam(orgId: string, teamId: string): Promise<{
        response: Response;
        body?: any;
    }>;
    /**
     * Retrieves team information for an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Get team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     */
    enterpriseGetTeam(orgId: string, teamId: string): Promise<{
        response: Response;
        body: Team;
    }>;
    /**
     * Retrieves list of teams in an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary List teams
     * @param orgId The id of an Organization.
     * @param limit Limit of teams in result list
     * @param cursor Team id that will be used to find team next to this id in the sorted list
     * @param filterQuery Filtering query
     */
    enterpriseGetTeams(orgId: string, query?: {
        limit?: number;
        cursor?: string;
        filterQuery?: string;
    }): Promise<{
        response: Response;
        body: Array<Team>;
    }>;
    /**
     * Updates an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href=\"/reference/api-reference#enterprise-plan\">Enterprise plan</a> users.</p>
     * @summary Update team
     * @param orgId The id of an Organization.
     * @param teamId The id of a Team.
     * @param teamChanges
     */
    enterpriseUpdateTeam(orgId: string, teamId: string, teamChanges: TeamChanges): Promise<{
        response: Response;
        body: Team;
    }>;
    /**
     * Adds a text item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Create text item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to create the item.
     * @param textCreateRequest
     */
    createTextItem(boardId: string, textCreateRequest: TextCreateRequest): Promise<{
        response: Response;
        body: TextItem;
    }>;
    /**
     * Deletes a text item from the board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 3</a><br/>
     * @summary Delete text item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to delete the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to delete.
     */
    deleteTextItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: object;
    }>;
    /**
     * Retrieves information for a specific text item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 1</a><br/>
     * @summary Get text item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) from which you want to retrieve a specific item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to retrieve.
     */
    getTextItem(boardId: string, itemId: string): Promise<{
        response: Response;
        body: TextItem;
    }>;
    /**
     * Updates a text item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href=https://developers.miro.com/reference/ratelimiting>Level 2</a><br/>
     * @summary Update text item
     * @param boardId [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) where you want to update the item.
     * @param itemId [Unique identifier (ID) of the item](https://developers.miro.com/reference/rest-api-item-model) that you want to update.
     * @param textUpdateRequest
     */
    updateTextItem(boardId: string, itemId: string, textUpdateRequest: TextUpdateRequest): Promise<{
        response: Response;
        body: TextItem;
    }>;
    call(method: string, url: string, body?: string | FormData): Promise<{
        body: unknown;
        response: Response;
    }>;
}
export declare class HttpError extends Error {
    response: Response;
    body: any;
    statusCode?: number | undefined;
    constructor(response: Response, body: any, statusCode?: number | undefined);
}
export declare function makeJsonRequest(token: string, method: string, url: URL, body?: string | FormData, logger?: (...thing: any) => void, httpTimeout?: number): Promise<{
    bodyAsJson: unknown;
    response: Response;
}>;
